// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../src/generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                 String        @id @default(uuid())
  phoneNumber        String        @unique
  role               Role          @default(BUYER)
  password           String
  createdAt          DateTime      @default(now())
  updatedAt          DateTime      @updatedAt
  buyerTransactions  Transaction[] @relation("BuyerTransactions")
  sellerTransactions Transaction[] @relation("SellerTransactions")
  disputes           Dispute[]
}

enum Role {
  BUYER
  SELLER
  ESCROW_AGENT
  ADMIN
}

model Transaction {
  id                String            @id @default(uuid())
  amount            Float
  currency          String            @default("GHS")
  status            TransactionStatus @default(PENDING)
  buyerId           String
  buyer             User              @relation("BuyerTransactions", fields: [buyerId], references: [id])
  sellerId          String
  seller            User              @relation("SellerTransactions", fields: [sellerId], references: [id])
  description       String?
  hubtelReference   String?
  paymentVerified   Boolean           @default(false)
  deliveryConfirmed Boolean           @default(false)
  createdAt         DateTime          @default(now())
  updatedAt         DateTime          @updatedAt
  expiresAt         DateTime
  disputes          Dispute[]
}

enum TransactionStatus {
  PENDING
  PAID
  DELIVERED
  COMPLETED
  DISPUTED
  CANCELLED
  REFUNDED
}

model Dispute {
  id            String        @id @default(uuid())
  transactionId String
  transaction   Transaction   @relation(fields: [transactionId], references: [id])
  reason        String
  status        DisputeStatus @default(OPEN)
  resolution    String?
  resolvedBy    String?
  resolvedAt    DateTime?
  createdAt     DateTime      @default(now())
  updatedAt     DateTime      @updatedAt
  User          User?         @relation(fields: [userId], references: [id])
  userId        String?
}

enum DisputeStatus {
  OPEN
  IN_REVIEW
  RESOLVED
}
